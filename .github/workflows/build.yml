name: CI
on:
  push:
    branches: [ master, dev, compiler ]
  pull_request:
    branches: [ master, dev, compiler ]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup CMake
        if: runner.os != 'Windows'
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.3'
      
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v4
      
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y g++ build-essential
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19
      
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
          brew install llvm
          echo "LLVM_DIR=$(brew --prefix llvm)/lib/cmake/llvm" >> $GITHUB_ENV
      
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-llvm
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-cmake
      
      - name: Add LLVM to PATH
        if: runner.os == 'Windows'
        shell: bash
        run: |
          echo "PATH=/mingw/bin:$PATH"

      
      - name: Create build directory
        run: mkdir build
      
      - name: Configure with CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake -B build -S . -G Ninja
      
      - name: Configure with CMake (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cmake -B build -S . -G Ninja
      
      - name: Build (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake --build build --config Release
      
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          cmake --build build --config Release
      
      - name: Copy binary (Linux/macOS)
        if: runner.os != 'Windows'
        run: cp build/probescript probescript
      
      - name: Copy binary (Windows)
        if: runner.os == 'Windows'
        run: cp build/probescript.exe probescript.exe
      
      - name: Run tests
        run: bash tests/run-tests.sh